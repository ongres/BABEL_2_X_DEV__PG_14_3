
CREATE PROC errorFuncProc1 AS
BEGIN TRY
	RAISERROR ('raiserror 16', 16, 1);
END TRY
BEGIN CATCH
	SELECT 'CATCH in Procedure 1';
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
	THROW;
END CATCH
go




CREATE PROC errorFuncProc2 AS
BEGIN TRY
	EXEC errorFuncProc1;
END TRY
BEGIN CATCH
	DECLARE @msg NVARCHAR(4000);
	DECLARE @sev INT;
	DECLARE @state INT;
	SELECT 'CATCH in Procedure 2';
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
	
	SELECT
		@msg = ERROR_MESSAGE(),
		@sev = ERROR_SEVERITY(),
		@state = ERROR_STATE();
	SET @state = @state+1;
	RAISERROR (@msg, @sev, @state);
END CATCH
go

/* Outside of CATCH -- test 1 */
SELECT 
	ERROR_LINE() AS line, 
	ERROR_MESSAGE() AS msg,
	ERROR_NUMBER() AS num, 
	ERROR_PROCEDURE() AS proc_,
	ERROR_SEVERITY() AS sev,
	ERROR_STATE() AS state;
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>
~~END~~


/* Outside of CATCH -- test 2 */
BEGIN TRY
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END TRY
BEGIN CATCH
	SELECT 'Not arriving here';
END CATCH
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>
~~END~~


/* Multiple errors in single batch -- test 1 */
BEGIN TRY
	SELECT 100/0;
END TRY
BEGIN CATCH
	SELECT 'First CATCH';
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END CATCH
BEGIN TRY
	THROW 51000, 'throw error', 1;
END TRY
BEGIN CATCH
	SELECT 'Second CATCH';
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END CATCH
go
~~START~~
varchar
First CATCH
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
3#!#division by zero#!#8134#!#<NULL>#!#16#!#1
~~END~~

~~START~~
varchar
Second CATCH
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
16#!#throw error#!#51000#!#<NULL>#!#16#!#1
~~END~~



/* Multiple errors in single batch -- test 2 */
/* Nested TRY...CATCH */
BEGIN TRY
	SELECT 100/0;
END TRY
BEGIN CATCH
	BEGIN TRY
		THROW 51000, 'throw error', 1;
	END TRY
	BEGIN CATCH
		SELECT 'Inner CATCH';
		SELECT 
			ERROR_LINE() AS line, 
			ERROR_MESSAGE() AS msg,
			ERROR_NUMBER() AS num, 
			ERROR_PROCEDURE() AS proc_,
			ERROR_SEVERITY() AS sev,
			ERROR_STATE() AS state;
	END CATCH
	SELECT 'Outer CATCH';
	SELECT 
		ERROR_LINE() AS line, 
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num, 
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END CATCH
/* Multiple errors in nested batch */
EXEC errorFuncProc2;
go
~~START~~
varchar
Inner CATCH
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
8#!#throw error#!#51000#!#<NULL>#!#16#!#1
~~END~~

~~START~~
varchar
Outer CATCH
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
4#!#division by zero#!#8134#!#<NULL>#!#16#!#1
~~END~~

~~START~~
varchar
CATCH in Procedure 1
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
3#!#raiserror 16#!#50000#!#errorfuncproc1#!#16#!#1
~~END~~

~~START~~
varchar
CATCH in Procedure 2
~~END~~

~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
3#!#raiserror 16#!#50000#!#errorfuncproc1#!#16#!#1
~~END~~

~~ERROR (Code: 50000)~~

~~ERROR (Message: raiserror 16)~~


/* 
 * BABEL-1602 
 * Output of ERROR functions should be the same as error message
 */
CREATE TABLE errorFuncTable
(
	a INT,
	b INT,
	c VARCHAR(10) NOT NULL,
	CONSTRAINT CK_a_gt_b CHECK (b > a)
)
go

INSERT INTO errorFuncTable VALUES (5, 2, 'one')
go
~~ERROR (Code: 547)~~

~~ERROR (Message: new row for relation "errorfunctable" violates check constraint "ck_a_gt_berrorfunctablee59e418278eefa47185bf50958adfcb4")~~


BEGIN TRY
	INSERT INTO errorFuncTable VALUES (5, 2, 'one')
END TRY
BEGIN CATCH
	SELECT 
		ERROR_LINE() AS line,
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num,
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END CATCH
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
2#!#new row for relation "errorfunctable" violates check constraint "ck_a_gt_berrorfunctablee59e418278eefa47185bf50958adfcb4"#!#547#!#<NULL>#!#16#!#1
~~END~~


INSERT INTO errorFuncTable VALUES (1, 2, NULL)
go
~~ERROR (Code: 515)~~

~~ERROR (Message: null value in column "c" of relation "errorfunctable" violates not-null constraint)~~


BEGIN TRY
	INSERT INTO errorFuncTable VALUES (1, 2, NULL)
END TRY
BEGIN CATCH
	SELECT 
		ERROR_LINE() AS line,
		ERROR_MESSAGE() AS msg,
		ERROR_NUMBER() AS num,
		ERROR_PROCEDURE() AS proc_,
		ERROR_SEVERITY() AS sev,
		ERROR_STATE() AS state;
END CATCH
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
2#!#null value in column "c" of relation "errorfunctable" violates not-null constraint#!#515#!#<NULL>#!#16#!#1
~~END~~


-- Nested procedures (nested estates)
CREATE PROC errorFuncProcInner AS
SELECT
	ERROR_LINE() AS line,
	ERROR_MESSAGE() AS msg,
	ERROR_NUMBER() AS num,
	ERROR_PROCEDURE() AS proc_,
	ERROR_SEVERITY() AS sev,
	ERROR_STATE() AS state;
go

CREATE PROC errorFuncProcOuter1 AS
BEGIN TRY
	DECLARE @a INT
	SET @a = 1/0
END TRY
BEGIN CATCH
	EXEC errorFuncProcInner
END CATCH
go

EXEC errorFuncProcOuter1
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
4#!#division by zero#!#8134#!#errorfuncprocouter1#!#16#!#1
~~END~~


CREATE PROC errorFuncProcMiddle AS
BEGIN TRY
	EXEC errorFuncProcInner
END TRY
BEGIN CATCH
	SELECT 'error'
END CATCH
go

CREATE PROC errorFuncProcOuter2 AS
BEGIN TRY
	DECLARE @a INT
	SET @a = 1/0
END TRY
BEGIN CATCH
	EXEC errorFuncProcMiddle
END CATCH
go

EXEC errorFuncProcOuter2
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
4#!#division by zero#!#8134#!#errorfuncprocouter2#!#16#!#1
~~END~~


-- Multiple-level nested procedures with nested errors
-- Should report division by zero error in errorFuncProcOuter1
CREATE PROC errorFuncProcOuter3 AS
BEGIN TRY
	THROW 51000, 'throw error', 1;
END TRY
BEGIN CATCH
	EXEC errorFuncProcOuter1
END CATCH
go

EXEC errorFuncProcOuter3
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
4#!#division by zero#!#8134#!#errorfuncprocouter1#!#16#!#1
~~END~~


-- Should report THROW error in errorFuncProcOuter4
CREATE PROC errorFuncProcOuter4 AS
BEGIN TRY
	DECLARE @a INT
	SET @a = 1/0
END TRY
BEGIN CATCH
	BEGIN TRY
		THROW 51000, 'throw error', 1;
	END TRY
	BEGIN CATCH
		EXEC errorFuncProcMiddle
	END CATCH
END CATCH
go

EXEC errorFuncProcOuter4
go
~~START~~
int#!#nvarchar#!#int#!#nvarchar#!#int#!#int
9#!#throw error#!#51000#!#errorfuncprocouter4#!#16#!#1
~~END~~


/* Clean up */
DROP PROC errorFuncProc1
go

DROP PROC errorFuncProc2
go

DROP PROC errorFuncProcOuter1
go

DROP PROC errorFuncProcOuter2
go

DROP PROC errorFuncProcOuter3
go

DROP PROC errorFuncProcOuter4
go

DROP PROC errorFuncProcMiddle
go

DROP PROC errorFuncProcInner
go

DROP TABLE errorFuncTable
go
